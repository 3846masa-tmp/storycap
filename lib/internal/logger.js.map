{"version":3,"sources":["../../src/internal/logger.js"],"names":["log","console","createTitle","color","title","black","Logger","silent","debug","blank","spinner","stop","args","echo","blue","repeat","i","message","useSpinner","output","clear","text","setSpinnerString","start"],"mappings":";;;;;;;;;AAAA;;;;AACA;;;;AACA;;AACA;;;;;;AAEA,IAAMA,MAAMC,QAAQD,GAApB,C,CAAyB;;AAElB,IAAME,oCAAc,SAAdA,WAAc,CAACC,KAAD,EAAQC,KAAR;AAAA,SACzB,gBAAMC,KAAN,QAAiB,sBAAUF,KAAV,CAAjB,QAAyCC,KAAzC,OADyB;AAAA,CAApB;;IAIcE,M;AACnB,kBAAYC,MAAZ,EAAoBC,KAApB,EAA2B;AAAA;;AACzB,SAAKD,MAAL,GAAcA,MAAd;AACA,SAAKC,KAAL,GAAaA,KAAb;AACD;;;;4BAEO;AACN,UAAI,CAAC,KAAKA,KAAN,IAAe,CAAC,KAAKD,MAAzB,EAAiC;AAC/B;AACD,OAFD,MAEO,IAAI,KAAKC,KAAT,EAAgB;AACrB,aAAKC,KAAL,CAAW,CAAX;AACD;;AAED,UAAI,KAAKC,OAAT,EAAkB;AAChB,aAAKA,OAAL,CAAaC,IAAb,CAAkB,IAAlB;AACD;AACF;;;2BAEa;AACZ,UAAI,CAAC,KAAKJ,MAAV,EAAkB;AAChBP;AACD;AACF;;;wBAEGI,K,EAAgB;AAClB,UAAI,KAAKI,KAAT,EAAgB;AAAA,0CADJI,IACI;AADJA,cACI;AAAA;;AACd,aAAKC,IAAL,mBACKX,YAAY,MAAZ,EAAoB,OAApB,CADL,EAEE,gBAAMY,IAAN,OAAeV,KAAf,OAFF,SAGKQ,IAHL;AAKD;AACF;;;4BAEiB;AAAA,UAAZG,MAAY,uEAAH,CAAG;;AAChB,WAAK,IAAIC,IAAI,CAAb,EAAgBA,IAAID,MAApB,EAA4BC,KAAK,CAAjC,EAAoC;AAClC,aAAKH,IAAL;AACD;AACF;;;4BAEOV,K,EAAOC,K,EAAOa,O,EAA6B;AAAA,UAApBC,UAAoB,uEAAP,KAAO;;AACjD,UAAMC,SAAYjB,YAAYC,KAAZ,EAAmBC,KAAnB,CAAZ,SAAyCa,OAA/C;;AAEA,WAAKG,KAAL;;AAEA,UAAIF,cAAc,CAAC,KAAKX,MAApB,IAA8B,CAAC,KAAKC,KAAxC,EAA+C;AAC7C,aAAKE,OAAL,GAAe,wBAAY;AACzBW,gBAASF,MAAT,UADyB;AAEzBhB,iBAAO;AAFkB,SAAZ,CAAf;AAIA,aAAKO,OAAL,CAAaY,gBAAb,CAA8B,EAA9B;AACA,aAAKZ,OAAL,CAAaa,KAAb;AACD,OAPD,MAOO;AACL,aAAKV,IAAL,CAAUM,MAAV;AACD;AACF;;AAED;;;;0BACMF,O,EAAS;AACbhB,cAAQD,GAAR;AACAC,cAAQD,GAAR,CAAeE,YAAY,KAAZ,EAAmB,OAAnB,CAAf,SAA8Ce,OAA9C;AACAhB,cAAQD,GAAR;AACD;AACD;;;;;;;kBA/DmBM,M","file":"logger.js","sourcesContent":["import chalk from 'chalk';\nimport clear from 'clear';\nimport { Spinner } from '@tsuyoshiwada/cli-spinner';\nimport { pascalize } from './utils';\n\nconst log = console.log; // eslint-disable-line no-console\n\nexport const createTitle = (color, title) => (\n  chalk.black[`bg${pascalize(color)}`](` ${title} `)\n);\n\nexport default class Logger {\n  constructor(silent, debug) {\n    this.silent = silent;\n    this.debug = debug;\n  }\n\n  clear() {\n    if (!this.debug && !this.silent) {\n      clear();\n    } else if (this.debug) {\n      this.blank(2);\n    }\n\n    if (this.spinner) {\n      this.spinner.stop(true);\n    }\n  }\n\n  echo(...args) {\n    if (!this.silent) {\n      log(...args);\n    }\n  }\n\n  log(title, ...args) {\n    if (this.debug) {\n      this.echo(\n        `${createTitle('blue', 'DEBUG')}`,\n        chalk.blue(`[${title}]`),\n        ...args,\n      );\n    }\n  }\n\n  blank(repeat = 1) {\n    for (let i = 0; i < repeat; i += 1) {\n      this.echo();\n    }\n  }\n\n  section(color, title, message, useSpinner = false) {\n    const output = `${createTitle(color, title)} ${message}`;\n\n    this.clear();\n\n    if (useSpinner && !this.silent && !this.debug) {\n      this.spinner = new Spinner({\n        text: `${output} %s  `,\n        color: 'cyan',\n      });\n      this.spinner.setSpinnerString(18);\n      this.spinner.start();\n    } else {\n      this.echo(output);\n    }\n  }\n\n  /* eslint-disable no-console, class-methods-use-this */\n  error(message) {\n    console.log();\n    console.log(`${createTitle('red', 'ERROR')} ${message}`);\n    console.log();\n  }\n  /* eslint-enable */\n}\n"]}