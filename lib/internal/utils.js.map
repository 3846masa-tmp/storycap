{"version":3,"sources":["../../src/internal/utils.js"],"names":["sleep","Promise","setTimeout","resolve","ms","identity","v","parseInteger","parseInt","parseList","split","map","o","trim","parseRegExp","RegExp","filenamify","filename","replace","viewport2string","viewport","width","height","isMobile","hasTouch","isLandscape","deviceScaleFactor","join","story2filename","kind","story","namespace","pascalize","charAt","toUpperCase","slice","m","g","createArray","Array","length","fill","arrayChunk","arr","n","c","i","promiseChain","cb","results","reduce","acc","cur","then","result","push","lastResult"],"mappings":"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","file":"utils.js","sourcesContent":["import sanitize from 'sanitize-filename';\n\nexport const sleep = ms => new Promise(resolve => setTimeout(resolve, ms));\n\nexport const identity = v => v;\n\nexport const parseInteger = v => parseInt(v, 10);\n\nexport const parseList = v => (\n  v ? v.split(',').map(o => o.trim()) : null\n);\n\nexport const parseRegExp = v => (\n  v ? new RegExp(v) : null\n);\n\nexport const filenamify = filename => (\n  sanitize(filename).replace(/\\s/g, '-')\n);\n\nexport const viewport2string = viewport => ([\n  `${viewport.width}x${viewport.height}`,\n  `${viewport.isMobile ? '-mobile' : ''}`,\n  `${viewport.hasTouch ? '-touch' : ''}`,\n  `${viewport.isLandscape ? '-landscape' : ''}`,\n  `${viewport.deviceScaleFactor > 1 ? `@${viewport.deviceScaleFactor}x` : ''}`,\n].join(''));\n\nexport const story2filename = (kind, story, viewport = null, namespace = null) => (\n  `${filenamify(`${kind}-${story}${namespace ? `_${namespace}` : ''}${viewport ? `-${viewport2string(viewport)}` : ''}`)}.png`\n);\n\nexport const pascalize = v => (\n  `${v.charAt(0).toUpperCase()}${v.slice(1)}`.replace(/[-_](.)/g, (m, g) => (\n    g.toUpperCase()\n  ))\n);\n\nexport const createArray = length => (new Array(length)).fill(null);\n\nexport const arrayChunk = (arr, n) => (\n  arr.slice(0, (((arr.length + n) - 1) / n) | 0) // eslint-disable-line no-bitwise\n    .map((c, i) => arr.slice(n * i, (n * i) + n))\n);\n\nexport const promiseChain = (arr, cb) => {\n  const results = [];\n  return arr.reduce(\n    (acc, cur) => acc.then((result) => {\n      results.push(result);\n      return cb(cur);\n    }),\n    Promise.resolve() // eslint-disable-line\n  ).then(lastResult => [...results, lastResult].slice(1));\n};\n"]}