{"version":3,"sources":["../src/cli.js"],"names":["path","fs","version","usage","option","parse","process","argv","logger","silent","debug","exit","message","code","error","bin","encoding","trim","options","port","host","staticDir","configDir","outputDir","filterKind","filterStory","browserTimeout","parallel","injectFiles","cwd","resolve","cmd","config","existsSync","store","server","browser","progressbar","close","kill","section","LAUNCH","log","Promise","all","launch","map","newPage","page","emitter","on","args","exposeFunction","index","emit","COMPONENT_READY","getStories","clear","goto","phase","query","createURL","full","timeout","waitUntil","takeScreenshot","setViewport","story","viewport","CAPTURE","selectKind","kind","selectStory","resolveEmitter","once","file","join","filename","addScriptTag","filePath","screenshot","fullPage","expose","fn","pages","firstPage","PREPARE","takeScreenshotOfStories","stories","Math","min","length","chunkSize","max","ceil","chunkedStories","arr","i","JSON","stringify","tick","doneAllComponentScreenshot","terminate","DONE","blank","skippedStories","getSkippedStories","forEach","echo","success","warning","yellow","results","setStories","emojify","complete","incomplete","width","total"],"mappings":"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","file":"cli.js","sourcesContent":["\n\nimport * as path from 'path';\nimport * as fs from 'fs';\nimport { EventEmitter } from 'events';\nimport { execSync } from 'child_process';\nimport 'babel-polyfill';\nimport program from 'commander';\nimport emoji from 'node-emoji';\nimport logSymbols from 'log-symbols';\nimport chalk from 'chalk';\nimport ProgressBar from 'progress';\nimport puppeteer from 'puppeteer';\nimport mkdirp from 'mkdirp';\nimport pkg from '../package.json';\nimport Store from './internal/store';\nimport startStorybookServer from './internal/server';\nimport {\n  PhaseTypes,\n  EventTypes,\n} from './constants';\nimport {\n  identity,\n  parseInteger,\n  parseList,\n  parseRegExp,\n  createArray,\n  arrayChunk,\n} from './internal/utils';\nimport Logger from './internal/logger';\n\n\nprogram\n  .version(pkg.version)\n  .usage('[options]')\n  .option('-p, --port [number]', 'Storybook server port (Default 9001)', parseInteger, 9001)\n  .option('-h, --host [string]', 'Storybook server host (Default \"localhost\")', identity, 'localhost')\n  .option('-s, --static-dir <dir-names>', 'Directory where to load static files from', parseList)\n  .option('-c, --config-dir [dir-name]', 'Directory where to load Storybook configurations from (Default \".storybook\")', identity, '.storybook')\n  .option('-o, --output-dir [dir-name]', 'Directory where screenshot images are saved (Default \"__screenshots__\")', identity, '__screenshots__')\n  .option('--parallel [number]', 'Number of Page Instances of Puppeteer to be activated when shooting screenshots (Default 4)', parseInteger, 4)\n  .option('--filter-kind [regexp]', 'Filter of kind with RegExp. (Example \"Button$\")', parseRegExp)\n  .option('--filter-story [regexp]', 'Filter of story with RegExp. (Example \"^with\\\\s.+$\")', parseRegExp)\n  .option('--inject-files <file-names>', 'Path to the JavaScript file to be injected into frame. (Default \"\")', parseList, [])\n  .option('--browser-timeout [number]', 'Timeout milliseconds when Puppeteer opens Storybook. (Default 30000)', parseInteger, 30000)\n  .option('--silent', 'Suppress standard output', identity, false)\n  .option('--debug', 'Enable debug mode.', identity, false)\n  .parse(process.argv);\n\n\nconst logger = new Logger(program.silent, program.debug);\n\nconst exit = (message, code = 1) => {\n  logger.error(message);\n  process.exit(code);\n};\n\nconst bin = execSync('echo $(npm bin)', { encoding: 'utf-8' }).trim();\n\nconst options = {\n  port: program.port,\n  host: program.host,\n  staticDir: program.staticDir,\n  configDir: program.configDir,\n  outputDir: program.outputDir,\n  filterKind: program.filterKind,\n  filterStory: program.filterStory,\n  browserTimeout: program.browserTimeout,\n  parallel: program.parallel,\n  injectFiles: program.injectFiles,\n  debug: program.debug,\n  cwd: path.resolve(bin, '..', '..'),\n  cmd: path.resolve(bin, 'start-storybook'),\n};\n\nconst config = path.resolve(options.cwd, options.configDir, 'config.js');\n\nif (!fs.existsSync(options.cmd)) {\n  exit(`Storybook does not exists. First, let's setup a Storybook!\n    See: https://storybook.js.org/basics/quick-start-guide/`);\n}\n\nif (!fs.existsSync(config)) {\n  exit(`\"${options.configDir}/config.js\" does not exists.`);\n}\n\n\n(async () => {\n  const store = new Store(options.filterKind, options.filterStory);\n  let server;\n  let browser;\n  let progressbar;\n\n  const close = () => {\n    if (server) server.kill();\n    if (browser) browser.close();\n  };\n\n  try {\n    logger.section('green', PhaseTypes.LAUNCH, 'Launching storybook server...', true);\n\n    logger.log('NODE', 'Inject files, ', options.injectFiles);\n    logger.log('NODE', `Filter of kind and story, (kind = ${options.filterKind}, story = ${options.filterStory})`);\n\n    [server, browser] = await Promise.all([\n      startStorybookServer(options, logger),\n      puppeteer.launch(),\n    ]);\n\n    const pages = await Promise.all(createArray(options.parallel).map(async () => {\n      const page = await browser.newPage();\n      const emitter = new EventEmitter();\n\n      page.on('console', (...args) => {\n        logger.log('BROWSER', ...args);\n      });\n\n      await page.exposeFunction('readyComponentScreenshot', (index) => {\n        emitter.emit(EventTypes.COMPONENT_READY, index);\n      });\n\n      await page.exposeFunction('getScreenshotStories', () => (\n        store.getStories()\n      ));\n\n      await page.exposeFunction('failureScreenshot', (error) => {\n        logger.clear();\n        close();\n        exit(error);\n      });\n\n      const goto = (phase, query = {}) => (\n        page.goto(server.createURL({\n          ...query,\n          full: 1,\n          'chrome-screenshot': phase,\n        }, {\n          timeout: options.browserTimeout,\n          waitUntil: ['networkidle', 'load', 'domcontentloaded'],\n        }))\n      );\n\n      const takeScreenshot = story => new Promise(async (resolve) => {\n        await page.setViewport(story.viewport);\n\n        await Promise.all([\n          goto(PhaseTypes.CAPTURE, {\n            selectKind: story.kind,\n            selectStory: story.story,\n          }),\n          new Promise((resolveEmitter) => {\n            emitter.once(EventTypes.COMPONENT_READY, resolveEmitter);\n          }),\n        ]);\n\n        const file = path.join(options.outputDir, story.filename);\n\n        await Promise.all(options.injectFiles.map(filePath => (\n          page.addScriptTag({\n            path: filePath,\n          })\n        )));\n\n        await page.screenshot({\n          path: path.resolve(options.cwd, file),\n          fullPage: true,\n        });\n\n        resolve(file);\n      });\n\n      return {\n        page,\n        goto,\n        takeScreenshot,\n        exposeFunction: (expose, fn) => page.exposeFunction(expose, fn),\n      };\n    }));\n\n    const firstPage = pages[0];\n\n    logger.section('cyan', PhaseTypes.PREPARE, 'Fetching the target components...', true);\n\n    const takeScreenshotOfStories = async () => {\n      const stories = store.getStories();\n      const parallel = Math.min(stories.length, options.parallel);\n      const chunkSize = Math.max(1, Math.ceil(stories.length / parallel));\n      const chunkedStories = arrayChunk(stories, chunkSize);\n\n      await Promise.all(chunkedStories.map(async (arr, i) => {\n        const page = pages[i];\n\n        /* eslint-disable no-restricted-syntax, no-await-in-loop */\n        for (const story of arr) {\n          const file = await page.takeScreenshot(story);\n\n          logger.log(\n            'NODE',\n            `Saved to \"${file}\".\n    kind: \"${story.kind}\"\n    story: \"${story.story}\"\n    viewport: \"${JSON.stringify(story.viewport)}\"`,\n          );\n\n          if (progressbar) {\n            progressbar.tick();\n          }\n        }\n        /* eslint-enable */\n      }));\n\n      doneAllComponentScreenshot(); // eslint-disable-line no-use-before-define\n    };\n\n    const doneAllComponentScreenshot = async () => {\n      if (progressbar) {\n        progressbar.terminate();\n      }\n\n      logger.section('cyan', PhaseTypes.DONE, 'Screenshot image saving is completed!');\n      logger.blank();\n\n      const stories = store.getStories();\n      const skippedStories = store.getSkippedStories();\n\n      stories.forEach(({ filename }) => {\n        logger.echo(`  ${logSymbols.success}  ${filename}`);\n      });\n\n      skippedStories.forEach(({ filename }) => {\n        logger.echo(`  ${logSymbols.warning}  ${filename} ${chalk.yellow('(skipped)')}`);\n      });\n\n      logger.blank(2);\n\n      close();\n      process.exit(0);\n    };\n\n    await firstPage.exposeFunction('setScreenshotStories', (results) => {\n      store.setStories(results);\n      mkdirp(options.outputDir);\n\n      const stories = store.getStories();\n      const skippedStories = store.getSkippedStories();\n\n      logger.section('yellow', PhaseTypes.CAPTURE, 'Capturing component screenshots...');\n      logger.blank();\n      logger.log('NODE', `Fetched stories ${JSON.stringify(stories, null, '  ')}`);\n      logger.log('NODE', `Skipped stories ${JSON.stringify(skippedStories, null, '  ')}`);\n\n      if (!logger.silent && !logger.debug) {\n        progressbar = new ProgressBar(emoji.emojify(':camera:  [:bar] :current/:total'), {\n          complete: '=',\n          incomplete: ' ',\n          width: 40,\n          total: stories.length,\n        });\n      }\n\n      takeScreenshotOfStories();\n    });\n\n    await firstPage.goto(PhaseTypes.PREPARE);\n  } catch (e) {\n    close();\n    exit(e);\n  }\n})();\n"]}