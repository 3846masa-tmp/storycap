{"version":3,"sources":["../../src/components/ScreenshotWrapper.js"],"names":["ScreenshotWrapper","props","args","handleRef","component","emit","COMPONENT_INIT","delay","node","COMPONENT_MOUNT","setTimeout","COMPONENT_READY","type","channel","context","viewport","namespace","children"],"mappings":";;;;;;;;;;AAEA;;;;AACA;;AACA;;;;AACA;;;;;;;;+eALA;AACA;;;IAMqBA,iB;;;AACnB,6BAAYC,KAAZ,EAA4B;AAAA;;AAAA;;AAAA,sCAANC,IAAM;AAANA,UAAM;AAAA;;AAAA,0JACpBD,KADoB,SACVC,IADU;;AAAA,UAyB5BC,SAzB4B,GAyBhB,UAACC,SAAD,EAAe;AACzB,YAAKA,SAAL,GAAiBA,SAAjB;AACD,KA3B2B;;AAE1B,UAAKC,IAAL,CAAU,sBAAWC,cAArB;AAF0B;AAG3B;;;;wCAEmB;AAAA;;AAAA,UACVC,KADU,GACA,KAAKN,KADL,CACVM,KADU;;AAElB,UAAMC,OAAO,2BAAY,KAAKJ,SAAjB,CAAb;AACA,WAAKC,IAAL,CAAU,sBAAWI,eAArB;;AAEA,kCAAaD,IAAb,EAAmB,YAAM;AACvBE,mBAAW,YAAM;AACf,iBAAKL,IAAL,CAAU,sBAAWM,eAArB;AACD,SAFD,EAEGJ,KAFH;AAGD,OAJD;AAKD;;;yBAEIK,I,EAAM;AACT,WAAKX,KAAL,CAAWY,OAAX,CAAmBR,IAAnB,CAAwBO,IAAxB,eACK,KAAKX,KAAL,CAAWa,OADhB;AAEEC,kBAAU,KAAKd,KAAL,CAAWc,QAFvB;AAGEC,mBAAW,KAAKf,KAAL,CAAWe;AAHxB;AAKD;;;6BAMQ;AAAA,UACCC,QADD,GACc,KAAKhB,KADnB,CACCgB,QADD;;;AAGP,aACE;AAAA;AAAA,UAAM,KAAK,KAAKd,SAAhB;AACGc;AADH,OADF;AAKD;;;;;;kBAtCkBjB,iB","file":"ScreenshotWrapper.js","sourcesContent":["/* eslint-disable react/prop-types */\n/* eslint-disable react/no-find-dom-node */\nimport React, { Component } from 'react';\nimport { findDOMNode } from 'react-dom';\nimport imagesLoaded from 'imagesloaded';\nimport { EventTypes } from '../constants';\n\nexport default class ScreenshotWrapper extends Component {\n  constructor(props, ...args) {\n    super(props, ...args);\n    this.emit(EventTypes.COMPONENT_INIT);\n  }\n\n  componentDidMount() {\n    const { delay } = this.props;\n    const node = findDOMNode(this.component);\n    this.emit(EventTypes.COMPONENT_MOUNT);\n\n    imagesLoaded(node, () => {\n      setTimeout(() => {\n        this.emit(EventTypes.COMPONENT_READY);\n      }, delay);\n    });\n  }\n\n  emit(type) {\n    this.props.channel.emit(type, {\n      ...this.props.context,\n      viewport: this.props.viewport,\n      namespace: this.props.namespace,\n    });\n  }\n\n  handleRef = (component) => {\n    this.component = component;\n  };\n\n  render() {\n    const { children } = this.props;\n\n    return (\n      <span ref={this.handleRef}>\n        {children}\n      </span>\n    );\n  }\n}\n"]}